#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <sys/stat.h>
#include <dirent.h>

#define FILENAME "example.txt"
#define DIRNAME "."
int main() {
    int fd;
    char buffer[128];
    struct stat fileStat;
    DIR *dir;
    struct dirent *entry;
    fd = open(FILENAME, O_RDWR | O_CREAT, 0644);
    if (fd == -1) {
        perror("Error opening file");
        return 1;
    }
    printf("File '%s' opened successfully with file descriptor: %d\n", FILENAME, fd);
    const char *data = "Hello, UNIX system calls!";
    ssize_t bytesWritten = write(fd, data, strlen(data));
    if (bytesWritten == -1) {
        perror("Error writing to file");
        close(fd);
        return 1;
    }
    printf("Wrote %zd bytes to the file.\n", bytesWritten);
    off_t newOffset = lseek(fd, 0, SEEK_SET);
    if (newOffset == -1) {
        perror("Error seeking in file");
        close(fd);
        return 1;
    }
    printf("File offset moved to: %ld\n", newOffset);
    ssize_t bytesRead = read(fd, buffer, sizeof(buffer) - 1);
    if (bytesRead == -1) {
        perror("Error reading from file");
        close(fd);
        return 1;
    }
    buffer[bytesRead] = '\0'; // Null-terminate the string
    printf("Read %zd bytes: %s\n", bytesRead, buffer);
    int flags = fcntl(fd, F_GETFL);
    if (flags == -1) {
        perror("Error getting file status flags");
        close(fd);
        return 1;
    }
    printf("File status flags: %d\n", flags);
    if (stat(FILENAME, &fileStat) == -1) {
        perror("Error getting file information");
        close(fd);
        return 1;
    }
    printf("File size: %ld bytes\n", fileStat.st_size);
    printf("File permissions: %o\n", fileStat.st_mode & 0777);
    dir = opendir(DIRNAME);
    if (dir == NULL) {
        perror("Error opening directory");
        close(fd);
        return 1;
    }
    printf("Directory '%s' opened successfully.\n", DIRNAME);
    printf("Directory contents:\n");
    while ((entry = readdir(dir)) != NULL) {
        printf("%s\n", entry->d_name);
    }
    closedir(dir);
    printf("Directory closed.\n");
    close(fd);
    printf("File '%s' closed.\n", FILENAME);

    return 0;
}
