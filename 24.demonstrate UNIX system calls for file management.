#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#define FILENAME "example.txt"
#define BUFFER_SIZE 128
int main() {
    int fd;
    char buffer[BUFFER_SIZE];
    ssize_t bytesRead, bytesWritten;

    // 1. Open a file for reading and writing, create it if it doesn't exist
    fd = open(FILENAME, O_CREAT | O_RDWR, 0644);
    if (fd == -1) {
        perror("Error opening/creating file");
        return 1;
    }
    printf("File '%s' opened successfully with file descriptor: %d\n", FILENAME, fd);
    const char *data = "Hello, this is a test using UNIX system calls.\n";
    bytesWritten = write(fd, data, strlen(data));
    if (bytesWritten == -1) {
        perror("Error writing to file");
        close(fd);
        return 1;
    }
    printf("Wrote %zd bytes to the file.\n", bytesWritten);
    if (lseek(fd, 0, SEEK_SET) == -1) {
        perror("Error seeking to the beginning of the file");
        close(fd);
        return 1;
    }
    bytesRead = read(fd, buffer, sizeof(buffer) - 1);
    if (bytesRead == -1) {
        perror("Error reading from file");
        close(fd);
        return 1;
    }
    buffer[bytesRead] = '\0'; // Null-terminate the string
    printf("Read %zd bytes from the file: %s\n", bytesRead, buffer);
    int flags = fcntl(fd, F_GETFL);
    if (flags == -1) {
        perror("Error getting file status flags");
        close(fd);
        return 1;
    }
    printf("File status flags: %d\n", flags);
    if (close(fd) == -1) {
        perror("Error closing file");
        return 1;
    }
    printf("File '%s' closed successfully.\n", FILENAME);

    return 0;
}
