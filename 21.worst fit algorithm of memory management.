#include <stdio.h>
int main() {
    int nBlocks, nProcesses;
    printf("Enter number of memory blocks: ");
    scanf("%d", &nBlocks);
    int blockSize[nBlocks];
    for (int i = 0; i < nBlocks; i++) {
        printf("Size of Block %d: ", i);
        scanf("%d", &blockSize[i]);
    }
 printf("Enter number of processes: ");
    scanf("%d", &nProcesses);
    int procSize[nProcesses];
    for (int i = 0; i < nProcesses; i++) {
        printf("Size of Process %d: ", i);
        scanf("%d", &procSize[i]);
    }
 int allocation[nProcesses];
    for (int i = 0; i < nProcesses; i++) {
        allocation[i] = -1;  // initially not allocated
    }
    for (int i = 0; i < nProcesses; i++) {
        int wstIdx = -1;
        for (int j = 0; j < nBlocks; j++) {
            if (blockSize[j] >= procSize[i]) {
                if (wstIdx == -1) {
                    wstIdx = j;
                } else if (blockSize[j] > blockSize[wstIdx]) {
                    wstIdx = j;
                }
            }
        }
        if (wstIdx != -1) {
            allocation[i] = wstIdx;
            // reduce remaining size in that block
            blockSize[wstIdx] -= procSize[i];
        }
    }
    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < nProcesses; i++) {
        printf("%d\t\t%d\t\t", i, procSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i]);
        else
            printf("Not Allocated\n");
    }

    return 0;
}
