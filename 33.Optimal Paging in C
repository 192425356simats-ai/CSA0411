#include <stdio.h>

int predict(int pages[], int memory[], int frames, int total_pages, int index) {
    int result = -1, farthest = index;
    for (int i = 0; i < frames; i++) {
        int j;
        for (j = index; j < total_pages; j++) {
            if (memory[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    result = i;
                }
                break;
            }
        }

        if (j == total_pages)
            return i;
    }

    return (result == -1) ? 0 : result;
}

int main() {
    int frames, pages, i, j, page_faults = 0;
    printf("Enter number of frames: ");
    scanf("%d", &frames);

    printf("Enter number of pages: ");
    scanf("%d", &pages);

    int page_sequence[pages];
    printf("Enter page reference string: ");
    for (i = 0; i < pages; i++) {
        scanf("%d", &page_sequence[i]);
    }

    int memory[frames];
    for (i = 0; i < frames; i++)
        memory[i] = -1;

    for (i = 0; i < pages; i++) {
        int found = 0;
        for (j = 0; j < frames; j++) {
            if (memory[j] == page_sequence[i]) {
                found = 1;
                break;
            }
        }

        if (!found) {
            int pos = -1;
            for (j = 0; j < frames; j++) {
                if (memory[j] == -1) {
                    pos = j;
                    break;
                }
            }

            if (pos == -1)
                pos = predict(page_sequence, memory, frames, pages, i + 1);

            memory[pos] = page_sequence[i];
            page_faults++;
        }

        // Display current state
        printf("Frame content after accessing page %d: ", page_sequence[i]);
        for (j = 0; j < frames; j++) {
            if (memory[j] != -1)
                printf("%d ", memory[j]);
            else
                printf("- ");
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", page_faults);
    return 0;
}

