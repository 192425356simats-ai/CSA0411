#include <stdio.h>

int findLRU(int time[], int n) {
    int i, min = time[0], pos = 0;
    for (i = 1; i < n; ++i) {
        if (time[i] < min) {
            min = time[i];
            pos = i;
        }
    }
    return pos;
}

int main() {
    int frames, pages, i, j, page_faults = 0, counter = 0;
    printf("Enter number of frames: ");
    scanf("%d", &frames);
    
    printf("Enter number of pages: ");
    scanf("%d", &pages);

    int page_sequence[pages];
    printf("Enter page reference string: ");
    for (i = 0; i < pages; i++) {
        scanf("%d", &page_sequence[i]);
    }

    int memory[frames], time[frames];
    for (i = 0; i < frames; i++)
        memory[i] = -1;

    for (i = 0; i < pages; i++) {
        int found = 0;
        for (j = 0; j < frames; j++) {
            if (memory[j] == page_sequence[i]) {
                counter++;
                time[j] = counter;
                found = 1;
                break;
            }
        }

        if (!found) {
            int pos = -1;
            for (j = 0; j < frames; j++) {
                if (memory[j] == -1) {
                    pos = j;
                    break;
                }
            }

            if (pos == -1)
                pos = findLRU(time, frames);

            memory[pos] = page_sequence[i];
            counter++;
            time[pos] = counter;
            page_faults++;
        }

        // Display current state
        printf("Frame content after accessing page %d: ", page_sequence[i]);
        for (j = 0; j < frames; j++) {
            if (memory[j] != -1)
                printf("%d ", memory[j]);
            else
                printf("- ");
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", page_faults);
    return 0;
}
